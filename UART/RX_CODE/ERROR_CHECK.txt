module ErrorChecker (
    input wire         reset_active_low,  
    input wire         frame_ready,      
    input wire  [12:0] received_frame,    
    input wire         received_parity,  
    input wire         received_start,  
    input wire         received_stop,    
    input wire  [1:0]  parity_mode,       
    output reg  [3:0]  error_location,   
    output reg         corrected,         
    output reg  [7:0]  corrected_data,   
    output reg         global_error_flag, 
    output reg  [2:0]  frame_error_flag   
);

    // Internal signals
    reg [4:0] calculated_parity;
    reg [4:0] received_parity_bits;  
    reg [7:0] data_bits;       
    reg [4:0] syndrome;         

    reg parity_error;
    reg start_error;
    reg stop_error;

    // Extract data and parity bits
    always @(*) begin
        data_bits = received_frame[12:5]; 
        received_parity_bits = received_frame[4:0]; 
    end

    // Calculate parity bits from the received data
    always @(*) begin
        calculated_parity[0] = data_bits[0] ^ data_bits[1] ^ data_bits[3] ^ data_bits[4] ^ data_bits[6];
        calculated_parity[1] = data_bits[0] ^ data_bits[2] ^ data_bits[3] ^ data_bits[5] ^ data_bits[6];
        calculated_parity[2] = data_bits[1] ^ data_bits[2] ^ data_bits[3] ^ data_bits[7];
        calculated_parity[3] = data_bits[4] ^ data_bits[5] ^ data_bits[6] ^ data_bits[7];
        calculated_parity[4] = data_bits[0] ^ data_bits[1] ^ data_bits[2] ^ data_bits[3] ^
                               data_bits[4] ^ data_bits[5] ^ data_bits[6] ^ data_bits[7];
    end

    // Syndrome calculation for error detection
    always @(*) begin
        syndrome = received_parity_bits ^ calculated_parity; // XOR to find differences
    end

    // Error detection and correction
    always @(*) begin
        // Parity check for data bits
        parity_error = (parity_mode == 2'b01) ? ~(^data_bits) != received_parity :
                       (parity_mode == 2'b10) ? (^data_bits) != received_parity :
                       1'b0;

        // Start and Stop Bit checks
        start_error = (received_start != 1'b0); 
        stop_error = (received_stop != 1'b1);  

        // Frame-level error reporting
        frame_error_flag = {stop_error, start_error, parity_error};

        // Correction for data bits using syndrome
        if (syndrome != 5'b00000) begin
            error_location = syndrome; // Syndrome indicates the error location
            corrected_data = data_bits ^ (1 << (error_location - 1)); // Flip the erroneous bit
            corrected = 1'b1;
        end else begin
            error_location = 4'd0;
            corrected_data = data_bits; 
            corrected = 1'b0;
        end

        // Global error flag
        global_error_flag = |frame_error_flag || (syndrome != 5'b00000);
    end

endmodule
